// ¬© 2024 TINI COMPANY - CONFIDENTIAL
// Employee: rongdeptrai-vl <rongdz2307@gmail.com>
// Commit: 8035ae4 | Time: 2025-08-11T02:28:42Z
// Watermark: TINI_1754879322_e868a412 | TINI_WATERMARK
// WARNING: Unauthorized distribution is prohibited
const fs = require('fs');
const path = require('path');

// C·∫•u h√¨nh b·∫£n d·ªãch cho c√°c keys thi·∫øu
const missingTranslations = {
    "btn_export_data": {
        "vi": "Xu·∫•t D·ªØ Li·ªáu",
        "hi": "‡§°‡•á‡§ü‡§æ ‡§®‡§ø‡§∞‡•ç‡§Ø‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç",
        "ko": "Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞"
    },
    "analytics_avg_session": {
        "vi": "Phi√™n Trung B√¨nh",
        "hi": "‡§î‡§∏‡§§ ‡§∏‡§§‡•ç‡§∞",
        "ko": "ÌèâÍ∑† ÏÑ∏ÏÖò"
    },
    "analytics_bounce_rate": {
        "vi": "T·ª∑ L·ªá Tho√°t",
        "hi": "‡§¨‡§æ‡§â‡§Ç‡§∏ ‡§¶‡§∞",
        "ko": "Ïù¥ÌÉàÎ•†"
    },
    "analytics_conversion_rate": {
        "vi": "T·ª∑ L·ªá Chuy·ªÉn ƒê·ªïi",
        "hi": "‡§∞‡•Ç‡§™‡§æ‡§Ç‡§§‡§∞‡§£ ‡§¶‡§∞",
        "ko": "Ï†ÑÌôòÏú®"
    },
    "analytics_user_retention": {
        "vi": "Gi·ªØ Ch√¢n Ng∆∞·ªùi D√πng",
        "hi": "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§™‡•ç‡§∞‡§§‡§ø‡§ß‡§æ‡§∞‡§£",
        "ko": "ÏÇ¨Ïö©Ïûê Ïú†ÏßÄ"
    },
    "analytics_traffic_title": {
        "vi": "Ph√¢n T√≠ch L∆∞u L∆∞·ª£ng",
        "hi": "‡§ü‡•ç‡§∞‡•à‡§´‡§ø‡§ï ‡§è‡§®‡§æ‡§≤‡§ø‡§ü‡§ø‡§ï‡•ç‡§∏",
        "ko": "Ìä∏ÎûòÌîΩ Î∂ÑÏÑù"
    },
    "analytics_performance_title": {
        "vi": "S·ªë Li·ªáu Hi·ªáu Su·∫•t",
        "hi": "‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§Æ‡•á‡§ü‡•ç‡§∞‡§ø‡§ï‡•ç‡§∏",
        "ko": "ÏÑ±Îä• ÏßÄÌëú"
    },
    "analytics_retention_title": {
        "vi": "Ph√¢n T√≠ch Gi·ªØ Ch√¢n Ng∆∞·ªùi D√πng",
        "hi": "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§™‡•ç‡§∞‡§§‡§ø‡§ß‡§æ‡§∞‡§£ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "ko": "ÏÇ¨Ïö©Ïûê Ïú†ÏßÄ Î∂ÑÏÑù"
    },
    "analytics_security_title": {
        "vi": "Ph√¢n T√≠ch B·∫£o M·∫≠t",
        "hi": "‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§è‡§®‡§æ‡§≤‡§ø‡§ü‡§ø‡§ï‡•ç‡§∏",
        "ko": "Î≥¥Ïïà Î∂ÑÏÑù"
    },
    "metric_active_users": {
        "vi": "NG∆Ø·ªúI D√ôNG HO·∫†T ƒê·ªòNG",
        "hi": "‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ",
        "ko": "ÌôúÏÑ± ÏÇ¨Ïö©Ïûê"
    },
    "metric_response_time": {
        "vi": "TH·ªúI GIAN PH·∫¢N H·ªíI",
        "hi": "‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∏‡§Æ‡§Ø",
        "ko": "ÏùëÎãµ ÏãúÍ∞Ñ"
    },
    "metric_retention_rate": {
        "vi": "T·ª∂ L·ªÜ GI·ªÆ CH√ÇN",
        "hi": "‡§™‡•ç‡§∞‡§§‡§ø‡§ß‡§æ‡§∞‡§£ ‡§¶‡§∞",
        "ko": "Ïú†ÏßÄÏú®"
    },
    "metric_threat_level": {
        "vi": "M·ª®C ƒê·ªò ƒêÂ®Å H·∫†I",
        "hi": "‡§ñ‡§§‡§∞‡•á ‡§ï‡§æ ‡§∏‡•ç‡§§‡§∞",
        "ko": "ÏúÑÌóò ÏàòÏ§Ä"
    }
};

// Danh s√°ch ng√¥n ng·ªØ c·∫ßn ƒë·ªìng b·ªô
const languagesToSync = ['vi', 'hi', 'ko'];
const localesPath = path.join(__dirname, '_locales');

console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô h√≥a ng√¥n ng·ªØ...\n');

languagesToSync.forEach(lang => {
    const filePath = path.join(localesPath, lang, 'messages.json');
    
    if (fs.existsSync(filePath)) {
        // ƒê·ªçc t·ªáp hi·ªán t·∫°i
        const currentMessages = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        console.log(`üìù X·ª≠ l√Ω ${lang.toUpperCase()}...`);
        
        // Th√™m c√°c keys thi·∫øu
        let addedCount = 0;
        Object.keys(missingTranslations).forEach(key => {
            if (!currentMessages[key] && missingTranslations[key][lang]) {
                currentMessages[key] = {
                    "message": missingTranslations[key][lang]
                };
                addedCount++;
                console.log(`   ‚úÖ Th√™m: ${key} = "${missingTranslations[key][lang]}"`);
            }
        });
        
        // S·∫Øp x·∫øp keys theo th·ª© t·ª± abc
        const sortedMessages = {};
        Object.keys(currentMessages).sort().forEach(key => {
            sortedMessages[key] = currentMessages[key];
        });
        
        // Ghi l·∫°i t·ªáp v·ªõi format ƒë·∫πp
        const jsonString = JSON.stringify(sortedMessages, null, 2);
        fs.writeFileSync(filePath, jsonString, 'utf8');
        
        console.log(`   üìä ƒê√£ th√™m ${addedCount} keys m·ªõi`);
        console.log(`   üìÑ T·ªïng c·ªông: ${Object.keys(sortedMessages).length} keys\n`);
    } else {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y t·ªáp: ${filePath}\n`);
    }
});

console.log('‚úÖ Ho√†n th√†nh ƒë·ªìng b·ªô h√≥a t·∫•t c·∫£ ng√¥n ng·ªØ!');
console.log('\nüîç Ch·∫°y l·∫°i ki·ªÉm tra ƒë·ªÉ x√°c nh·∫≠n...');

// Ch·∫°y l·∫°i ki·ªÉm tra
const languages = ['en', 'vi', 'hi', 'ko', 'zh'];

const loadMessages = (lang) => {
    const filePath = path.join(localesPath, lang, 'messages.json');
    if (fs.existsSync(filePath)) {
        return JSON.parse(fs.readFileSync(filePath, 'utf8'));
    }
    return {};
};

const allMessages = {};
languages.forEach(lang => {
    allMessages[lang] = loadMessages(lang);
});

const referenceKeys = Object.keys(allMessages.en);
console.log(`\nüìä K·∫øt qu·∫£ sau ƒë·ªìng b·ªô:`);
console.log('='.repeat(40));

languages.forEach(lang => {
    const currentKeys = Object.keys(allMessages[lang]);
    const missingKeys = referenceKeys.filter(key => !allMessages[lang][key]);
    
    if (missingKeys.length === 0) {
        console.log(`‚úÖ ${lang.toUpperCase()}: ${currentKeys.length}/${referenceKeys.length} keys - HO√ÄN CH·ªàNH`);
    } else {
        console.log(`‚ùå ${lang.toUpperCase()}: ${currentKeys.length}/${referenceKeys.length} keys - Thi·∫øu ${missingKeys.length} keys`);
    }
});
