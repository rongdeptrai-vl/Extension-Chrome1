// ¬© 2024 TINI COMPANY - CONFIDENTIAL
// Employee: rongdeptrai-vl <rongdz2307@gmail.com>
// Commit: 55548f4 | Time: 2025-08-08T06:33:01Z
// Watermark: TINI_1754634781_e868a412 | TINI_WATERMARK
// WARNING: Unauthorized distribution is prohibited
// TINI System Initializer - H·ªá th·ªëng kh·ªüi t·∫°o v√† k·∫øt n·ªëi t·ªïng th·ªÉ
// Qu·∫£n l√Ω vi·ªác load, verify v√† k·∫øt n·ªëi t·∫•t c·∫£ module trong project

class TiniSystemInitializer {
    constructor() {
        this.requiredModules = [
            // BOSS Security Core
            { name: 'TINI_BOSS_SECURITY', file: 'boss-ghost-security-integration.js', critical: true },
            { name: 'TINI_ULTIMATE_BOSS', file: 'ultimate-boss-core.js', critical: true },
            { name: 'TINI_BOSS_CLIENT', file: 'boss-ultimate-client.js', critical: true },
            
            // Authentication & Security
            { name: 'TINI_ROLE_SECURITY', file: 'SECURITY/tini-role-based-security.js', critical: true },
            { name: 'TINI_SECURE_AUTH', file: 'secure-auth-enhanced.js', critical: true },
            { name: 'TINI_ULTIMATE_SECURITY', file: 'SECURITY/ultimate-security.js', critical: true },
            
            // Monitoring & Performance
            { name: 'TINI_PERFORMANCE_MONITOR', file: 'performance-monitor.js', critical: false },
            { name: 'TINI_NETWORK_MONITOR', file: 'network-monitor-client.js', critical: false },
            
            // Network & Connection
            { name: 'TINI_CONNECTION_MANAGER', file: 'connection-manager.js', critical: true },
            { name: 'TINI_PHANTOM_NETWORK', file: 'phantom-network-layer.js', critical: true },
            
            // Advanced Features
            { name: 'TINI_UNIVERSAL_DISPATCHER', file: 'universal-event-dispatcher.js', critical: true },
            { name: 'TINI_DYNAMIC_CONTROLLER', file: 'advanced-dynamic-system-controller.js', critical: true },
            { name: 'TINI_NETWORK_ADAPTER', file: 'multi-protocol-network-adapter.js', critical: true },
            { name: 'TINI_SYSTEM_BRIDGE', file: 'system-integration-bridge.js', critical: true },
            { name: 'TINI_CROSS_COMMUNICATOR', file: 'cross-component-communicator.js', critical: true },
            
            // AI & Counterattack
            { name: 'TINI_AI_COUNTERATTACK', file: 'ai-powered-counterattack-system.js', critical: true },
            { name: 'TINI_COUNTERATTACK_INTEGRATION', file: 'counterattack-integration.js', critical: false },
            
            // Emergency Systems
            { name: 'TINI_ESCAPE_HATCH', file: 'escape-hatch.js', critical: false },
            { name: 'TINI_EMERGENCY_RECOVERY', file: 'emergency-boss-recovery.js', critical: false },
            
            // Advanced Security
            { name: 'TINI_HONEYPOT_SYSTEM', file: 'SECURITY/advanced-honeypot-system.js', critical: false },
            { name: 'TINI_THREAT_DETECTOR', file: 'SECURITY/internal-threat-detector.js', critical: false }
        ];

        this.loadedModules = new Map();
        this.failedModules = new Map();
        this.initializationStatus = 'pending';
        this.startTime = Date.now();
        
        console.log('üöÄ [TINI Initializer] System initializer kh·ªüi ƒë·ªông...');
    }

    async initialize() {
        console.log('üîÑ [TINI Initializer] B·∫Øt ƒë·∫ßu qu√° tr√¨nh kh·ªüi t·∫°o h·ªá th·ªëng...');
        
        try {
            // B∆∞·ªõc 1: Verify t·∫•t c·∫£ module ƒë√£ load
            await this.verifyModules();
            
            // B∆∞·ªõc 2: K·∫øt n·ªëi c√°c module v·ªõi nhau
            await this.connectModules();
            
            // B∆∞·ªõc 3: Kh·ªüi t·∫°o event system
            await this.initializeEventSystem();
            
            // B∆∞·ªõc 4: Ch·∫°y health check
            await this.performHealthCheck();
            
            this.initializationStatus = 'completed';
            console.log('‚úÖ [TINI Initializer] H·ªá th·ªëng ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng!');
            
            this.reportStatus();
            
        } catch (error) {
            this.initializationStatus = 'failed';
            console.error('‚ùå [TINI Initializer] Kh·ªüi t·∫°o th·∫•t b·∫°i:', error);
            this.reportFailure(error);
        }
    }

    async verifyModules() {
        console.log('üîç [TINI Initializer] ƒêang ki·ªÉm tra module...');
        
        for (const module of this.requiredModules) {
            const exists = this.checkModuleExists(module.name);
            
            if (exists) {
                this.loadedModules.set(module.name, {
                    ...module,
                    instance: window[module.name],
                    loadTime: Date.now()
                });
                console.log(`‚úÖ [TINI Initializer] Module ${module.name} ƒë√£ load th√†nh c√¥ng`);
            } else {
                this.failedModules.set(module.name, {
                    ...module,
                    error: 'Module kh√¥ng t·ªìn t·∫°i tr√™n window object',
                    failTime: Date.now()
                });
                
                if (module.critical) {
                    console.error(`‚ùå [TINI Initializer] Module quan tr·ªçng ${module.name} kh√¥ng load ƒë∆∞·ª£c!`);
                } else {
                    console.warn(`‚ö†Ô∏è [TINI Initializer] Module t√πy ch·ªçn ${module.name} kh√¥ng load ƒë∆∞·ª£c`);
                }
            }
        }
    }

    checkModuleExists(moduleName) {
        return typeof window[moduleName] !== 'undefined' && window[moduleName] !== null;
    }

    async connectModules() {
        console.log('üîó [TINI Initializer] ƒêang k·∫øt n·ªëi c√°c module...');
        
        // K·∫øt n·ªëi Universal Event Dispatcher v·ªõi t·∫•t c·∫£ module
        if (this.loadedModules.has('TINI_UNIVERSAL_DISPATCHER')) {
            const dispatcher = this.loadedModules.get('TINI_UNIVERSAL_DISPATCHER').instance;
            
            // ƒêƒÉng k√Ω t·∫•t c·∫£ module v·ªõi dispatcher
            for (const [name, module] of this.loadedModules) {
                if (name !== 'TINI_UNIVERSAL_DISPATCHER' && module.instance) {
                    try {
                        dispatcher.registerModule(name, module.instance);
                        console.log(`üîó [TINI Initializer] ƒê√£ k·∫øt n·ªëi ${name} v·ªõi Event Dispatcher`);
                    } catch (error) {
                        console.warn(`‚ö†Ô∏è [TINI Initializer] Kh√¥ng th·ªÉ k·∫øt n·ªëi ${name}:`, error.message);
                    }
                }
            }
        }

        // K·∫øt n·ªëi System Bridge v·ªõi c√°c core module
        if (this.loadedModules.has('TINI_SYSTEM_BRIDGE')) {
            const bridge = this.loadedModules.get('TINI_SYSTEM_BRIDGE').instance;
            
            // K·∫øt n·ªëi v·ªõi c√°c module quan tr·ªçng
            const coreModules = [
                'TINI_BOSS_SECURITY',
                'TINI_ROLE_SECURITY', 
                'TINI_CONNECTION_MANAGER',
                'TINI_AI_COUNTERATTACK'
            ];
            
            for (const moduleName of coreModules) {
                if (this.loadedModules.has(moduleName)) {
                    try {
                        bridge.connectModule(moduleName, this.loadedModules.get(moduleName).instance);
                        console.log(`üåâ [TINI Initializer] Bridge ƒë√£ k·∫øt n·ªëi v·ªõi ${moduleName}`);
                    } catch (error) {
                        console.warn(`‚ö†Ô∏è [TINI Initializer] Bridge kh√¥ng th·ªÉ k·∫øt n·ªëi ${moduleName}:`, error.message);
                    }
                }
            }
        }

        // K·∫øt n·ªëi Cross Component Communicator
        if (this.loadedModules.has('TINI_CROSS_COMMUNICATOR')) {
            const communicator = this.loadedModules.get('TINI_CROSS_COMMUNICATOR').instance;
            
            // Thi·∫øt l·∫≠p communication channels
            for (const [name, module] of this.loadedModules) {
                if (name !== 'TINI_CROSS_COMMUNICATOR' && module.instance) {
                    try {
                        communicator.establishChannel(name, module.instance);
                        console.log(`üì° [TINI Initializer] Communication channel v·ªõi ${name} ƒë√£ thi·∫øt l·∫≠p`);
                    } catch (error) {
                        console.warn(`‚ö†Ô∏è [TINI Initializer] Kh√¥ng th·ªÉ thi·∫øt l·∫≠p channel ${name}:`, error.message);
                    }
                }
            }
        }
    }

    async initializeEventSystem() {
        console.log('‚ö° [TINI Initializer] ƒêang kh·ªüi t·∫°o event system...');
        
        // T·∫°o global event bus n·∫øu ch∆∞a c√≥
        if (!window.TINI_SECURITY_BUS && this.loadedModules.has('TINI_UNIVERSAL_DISPATCHER')) {
            window.TINI_SECURITY_BUS = this.loadedModules.get('TINI_UNIVERSAL_DISPATCHER').instance;
            console.log('‚úÖ [TINI Initializer] Global Security Event Bus ƒë√£ ƒë∆∞·ª£c t·∫°o');
        }

        // Ph√°t s·ª± ki·ªán system ready
        if (window.TINI_SECURITY_BUS) {
            window.TINI_SECURITY_BUS.dispatch('tini:system-ready', {
                timestamp: Date.now(),
                loadedModules: Array.from(this.loadedModules.keys()),
                failedModules: Array.from(this.failedModules.keys()),
                initTime: Date.now() - this.startTime
            });
            
            console.log('üì¢ [TINI Initializer] Event system ready signal ƒë√£ ƒë∆∞·ª£c ph√°t');
        }

        // Trigger custom event cho DOM
        document.dispatchEvent(new CustomEvent('TINI_SYSTEM_READY', {
            detail: {
                status: 'ready',
                modules: Array.from(this.loadedModules.keys()),
                timestamp: Date.now()
            }
        }));
    }

    async performHealthCheck() {
        console.log('üè• [TINI Initializer] ƒêang th·ª±c hi·ªán health check...');
        
        const healthResults = {
            overall: 'healthy',
            modules: {},
            criticalIssues: []
        };

        // Ki·ªÉm tra t·ª´ng module
        for (const [name, module] of this.loadedModules) {
            try {
                let moduleHealth = 'healthy';
                
                // Ki·ªÉm tra basic functionality
                if (module.instance && typeof module.instance === 'object') {
                    // Ki·ªÉm tra methods c∆° b·∫£n
                    if (typeof module.instance.getStatus === 'function') {
                        const status = module.instance.getStatus();
                        moduleHealth = status.healthy ? 'healthy' : 'warning';
                    }
                } else {
                    moduleHealth = 'error';
                }
                
                healthResults.modules[name] = moduleHealth;
                
                if (moduleHealth === 'error' && module.critical) {
                    healthResults.criticalIssues.push(`Critical module ${name} has errors`);
                }
                
            } catch (error) {
                healthResults.modules[name] = 'error';
                if (module.critical) {
                    healthResults.criticalIssues.push(`Critical module ${name} health check failed: ${error.message}`);
                }
            }
        }

        // ƒê√°nh gi√° t·ªïng th·ªÉ
        if (healthResults.criticalIssues.length > 0) {
            healthResults.overall = 'critical';
        } else if (Object.values(healthResults.modules).includes('warning')) {
            healthResults.overall = 'warning';
        }

        console.log(`üè• [TINI Initializer] Health check ho√†n th√†nh - Status: ${healthResults.overall}`);
        
        // L∆∞u health report
        window.TINI_HEALTH_REPORT = healthResults;
        
        return healthResults;
    }

    reportStatus() {
        const totalModules = this.requiredModules.length;
        const loadedCount = this.loadedModules.size;
        const failedCount = this.failedModules.size;
        const initTime = Date.now() - this.startTime;

        console.log(`
üöÄ === TINI SYSTEM STATUS REPORT ===
üìä T·ªïng s·ªë module: ${totalModules}
‚úÖ ƒê√£ load th√†nh c√¥ng: ${loadedCount}
‚ùå Load th·∫•t b·∫°i: ${failedCount}
‚è±Ô∏è Th·ªùi gian kh·ªüi t·∫°o: ${initTime}ms
üìà T·ª∑ l·ªá th√†nh c√¥ng: ${Math.round((loadedCount/totalModules)*100)}%

üìã Module ƒë√£ load:
${Array.from(this.loadedModules.keys()).map(name => `   ‚úÖ ${name}`).join('\n')}

${failedCount > 0 ? `
‚ö†Ô∏è Module th·∫•t b·∫°i:
${Array.from(this.failedModules.keys()).map(name => `   ‚ùå ${name}`).join('\n')}
` : ''}
========================================`);

        // L∆∞u report v√†o global
        window.TINI_INIT_REPORT = {
            status: this.initializationStatus,
            totalModules,
            loadedCount,
            failedCount,
            initTime,
            successRate: Math.round((loadedCount/totalModules)*100),
            loadedModules: Array.from(this.loadedModules.keys()),
            failedModules: Array.from(this.failedModules.keys()),
            timestamp: Date.now()
        };
    }

    reportFailure(error) {
        console.error(`
‚ùå === TINI SYSTEM INITIALIZATION FAILED ===
üî• L·ªói: ${error.message}
‚è±Ô∏è Th·ªùi gian th·∫•t b·∫°i: ${Date.now() - this.startTime}ms
üìä Module ƒë√£ load tr∆∞·ªõc khi l·ªói: ${this.loadedModules.size}
==========================================`);
    }

    // Method ƒë·ªÉ restart system n·∫øu c·∫ßn
    async restart() {
        console.log('üîÑ [TINI Initializer] ƒêang restart h·ªá th·ªëng...');
        this.loadedModules.clear();
        this.failedModules.clear();
        this.initializationStatus = 'pending';
        this.startTime = Date.now();
        await this.initialize();
    }
}

// T·∫°o global instance
if (!window.TINI_SYSTEM_INITIALIZER) {
    window.TINI_SYSTEM_INITIALIZER = new TiniSystemInitializer();
    console.log('‚úÖ [TINI Initializer] Global System Initializer ƒë√£ ƒë∆∞·ª£c t·∫°o');
}

// Auto-initialize khi DOM ready
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ [TINI Initializer] DOM ready - B·∫Øt ƒë·∫ßu auto-initialize...');
    
    // Delay m·ªôt ch√∫t ƒë·ªÉ t·∫•t c·∫£ script kh√°c load xong
    setTimeout(async () => {
        await window.TINI_SYSTEM_INITIALIZER.initialize();
    }, 1000);
});

// Export cho s·ª≠ d·ª•ng b√™n ngo√†i
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TiniSystemInitializer;
}
